[
  {

 
    "id": "01",
    "category_name": "HTML",
    "title" : "Semantic Structure.",
    "image_url": "file:///C:/Users/Acer/Downloads/python.png",

    "details": "This contains two attributes, but there is no closing img tag and no inner content. This is because an image element doesn't wrap content to affect it. Its purpose is to embed an image in the HTML page in the place it appears.!DOCTYPE html - doctype. It is a required preamble. In the mists of time, when HTML was young (around 1991/92),  were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. However, these days, they don't do much and are basically just needed to make sure your document behaves correctly. That's all you need to know for now.
    <html></html>-the <html> element. This element wraps all the content on the entire page and is sometimes known as the root element. It also includes the lang attribute, setting the primary language of the document.
    <head></head> — the <head> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more.
    <meta charset=utf-8> — This element sets the character set your document should use to UTF-8 which includes most characters from the vast majority of written languages. Essentially, it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.
    <meta name=viewport content=width=device-width> — This viewport element ensures the page renders at the width of viewport, preventing mobile browsers from rendering pages wider than the viewport and then shrinking them down.
    <title></title> — the <title> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in. It is also used to describe the page when you bookmark/favorite it.
    <body></body> — the <body> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else."
    
   
  },
  {
    "id": "02",
    "category_name": "CSS",
    "title": "CSS Logical Properties",
    "image_url": "file:///C:/Users/Acer/Downloads/css.png",
    "details" : "Our CSS Learning Area features multiple modules that teach CSS from the ground up — no previous knowledge required.

    CSS first steps:
    CSS (Cascading Style Sheets) is used to style and layout web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. This module provides a gentle beginning to your path towards CSS mastery with the basics of how it works, what the syntax looks like, and how you can start using it to add styling to HTML.
    
    CSS building blocks:
    This module carries on where CSS first steps left off — now you've gained familiarity with the language and its syntax, and got some basic experience with using it, it's time to dive a bit deeper. This module looks at the cascade and inheritance, all the selector types we have available, units, sizing, styling backgrounds and borders, debugging, and lots more.
    
    The aim here is to provide you with a toolkit for writing competent CSS and help you understand all the essential theory, before moving on to more specific disciplines like text styling and CSS layout.
    
    CSS styling text:
    With the basics of the CSS language covered, the next CSS topic for you to concentrate on is styling text — one of the most common things you'll do with CSS. Here we look at text styling fundamentals, including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links.
    
    CSS layout:
    At this point we've already looked at CSS fundamentals, how to style text, and how to style and manipulate the boxes that your content sits inside. Now it's time to look at how to place your boxes in the right place in relation to the viewport, and to each other. We have covered the necessary prerequisites so we can now dive deep into CSS layout, looking at different display settings, modern layout tools like flexbox, CSS grid, and positioning, and some of the legacy techniques you might still want to know about.
    
    Use CSS to solve common problems
    This module provides links to sections of content explaining how to use CSS to solve common problems when creating a web page "
    
  },
  {
    "id": "03",
    "category_name": "javascript",
    "title" : "Life of front-end developer",
    "image_url": "file:///C:/Users/Acer/Downloads/js.png",
    "details" : "JavaScript (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, and is best known as the scripting language for Web pages, but it's used in many non-browser environments as well. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.

    JavaScript runs on the client side of the web, which can be used to design / program how the web pages behave on the occurrence of an event. JavaScript is an easy to learn and also powerful scripting language, widely used for controlling web page behavior.
    
    Contrary to popular misconception, JavaScript is not Interpreted Java. In a nutshell, JavaScript is a dynamic scripting language supporting prototype based object construction. The basic syntax is intentionally similar to both Java and C++ to reduce the number of new concepts required to learn the language. Language constructs, such as if statements, for and while loops, and switch and try ... catch blocks function the same as in these languages (or nearly so).
    
    JavaScript can function as both a procedural and an object oriented language. Objects are created programmatically in JavaScript, by attaching methods and properties to otherwise empty objects at run time, as opposed to the syntactic class definitions common in compiled languages like C++ and Java. Once an object has been constructed it can be used as a blueprint (or prototype) for creating similar objects.
    
    JavaScript's dynamic capabilities include runtime object construction, variable parameter lists, function variables, dynamic script creation (via eval), object introspection (via for ... in), and source code recovery (JavaScript programs can decompile function bodies back into their source text).
    
    For a more in depth discussion of JavaScript programming, follow the JavaScript resources links below."

  },
  {
    "id": "React js",
    "category_name": "CSS",
    "title" : "Life of website",
    "image_url": "file:///C:/Users/Acer/Downloads/react.png",
    "details" :""

  },
  {
    "id": "C",
    "category_name": "C",
    "title" : "Mother language",
    "image_url": "file:///C:/Users/Acer/Downloads/c%20.png",
    "details" : "C is an imperative procedural language supporting structured programming, lexical variable scope, and recursion, with a static type system. It was designed to be compiled to provide low-level access to memory and language constructs that map efficiently to machine instructions, all with minimal runtime support.The components of the above structure are: 
    Header Files Inclusion: The first and foremost component is the inclusion of the Header files in a C program. 
    A header file is a file with extension .h which contains C function declarations and macro definitions to be shared between several source files.
    1 Some of C Header files: 
    stddef.h – Defines several useful types and macros.
    stdint.h – Defines exact width integer types.
    stdio.h – Defines core input and output functions
    stdlib.h – Defines numeric conversion functions, pseudo-random network generator, memory allocation
    string.h – Defines string handling functions
    math.h – Defines common mathematical functions
    Main Method Declaration: The next part of a C program is to declare the main() function. The syntax to declare the main function is:
    Syntax to Declare the main method:"
     

  },
  
    {
      "id": "Python",
      "category_name": "CSS",
      "title" :"High level language",
      "image_url": "file:///C:/Users/Acer/Downloads/python.png",
      "details" : "Python is a computer programming language often used to build websites and software, automate tasks, and conduct data analysis. Python is a general-purpose language, meaning it can be used to create a variety of different programs and isn’t specialized for any specific problems. This versatility, along with its beginner-friendliness, has made it one of the most-used programming languages today. A survey conducted by industry analyst firm RedMonk found that it was the second-most popular programming language among developers in.Python is commonly used for developing websites and software, task automation, data analysis, and data visualization. Since it’s relatively easy to learn, Python has been adopted by many non-programmers such as accountants and scientists, for a variety of everyday tasks, like organizing finances.

      Writing programs is a very creative and rewarding activity, says University of Michigan and Coursera instructor Charles R Severance in his book Python for Everybody. You can write programs for many reasons, ranging from making your living to solving a difficult data analysis problem to having fun to helping someone else solve a problem."
  
    }
  
  



]