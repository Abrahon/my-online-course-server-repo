[


{
    "_id": "0282e0e58a5c404fbd15261f11c2ab6a",
    "others_info": {
      "is_todays_pick": false,
    "is_trending": true
    },
    "category_id": "01",
    "category_name": "HTML",
    "image_url": "file:///C:/Users/Acer/Downloads/python.png",

    "details": "This contains two attributes, but there is no closing img tag and no inner content. This is because an image element doesn't wrap content to affect it. Its purpose is to embed an image in the HTML page in the place it appears.!DOCTYPE html - doctype. It is a required preamble. In the mists of time, when HTML was young (around 1991/92),  were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML, which could mean automatic error checking and other useful things. However, these days, they don't do much and are basically just needed to make sure your document behaves correctly. That's all you need to know for now.
    <html></html>-the <html> element. This element wraps all the content on the entire page and is sometimes known as the root element. It also includes the lang attribute, setting the primary language of the document.
    <head></head> — the <head> element. This element acts as a container for all the stuff you want to include on the HTML page that isn't the content you are showing to your page's viewers. This includes things like keywords and a page description that you want to appear in search results, CSS to style our content, character set declarations, and more.
    <meta charset=utf-8> — This element sets the character set your document should use to UTF-8 which includes most characters from the vast majority of written languages. Essentially, it can now handle any textual content you might put on it. There is no reason not to set this, and it can help avoid some problems later on.
    <meta name=viewport content=width=device-width> — This viewport element ensures the page renders at the width of viewport, preventing mobile browsers from rendering pages wider than the viewport and then shrinking them down.
    <title></title> — the <title> element. This sets the title of your page, which is the title that appears in the browser tab the page is loaded in. It is also used to describe the page when you bookmark/favorite it.
    <body></body> — the <body> element. This contains all the content that you want to show to web users when they visit your page, whether that's text, images, videos, games, playable audio tracks, or whatever else."
    
   
  },
  {
    "category_id": "02",
    "category_name": "CSS",
    "image_url": "https://images.app.goo.gl/tjFiSczuorXqg9wW6",
    "details" : "Our CSS Learning Area features multiple modules that teach CSS from the ground up — no previous knowledge required.

    CSS first steps
    CSS (Cascading Style Sheets) is used to style and layout web pages — for example, to alter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features. This module provides a gentle beginning to your path towards CSS mastery with the basics of how it works, what the syntax looks like, and how you can start using it to add styling to HTML.
    
    CSS building blocks
    This module carries on where CSS first steps left off — now you've gained familiarity with the language and its syntax, and got some basic experience with using it, it's time to dive a bit deeper. This module looks at the cascade and inheritance, all the selector types we have available, units, sizing, styling backgrounds and borders, debugging, and lots more.
    
    The aim here is to provide you with a toolkit for writing competent CSS and help you understand all the essential theory, before moving on to more specific disciplines like text styling and CSS layout.
    
    CSS styling text
    With the basics of the CSS language covered, the next CSS topic for you to concentrate on is styling text — one of the most common things you'll do with CSS. Here we look at text styling fundamentals, including setting font, boldness, italics, line and letter spacing, drop shadows, and other text features. We round off the module by looking at applying custom fonts to your page, and styling lists and links.
    
    CSS layout
    At this point we've already looked at CSS fundamentals, how to style text, and how to style and manipulate the boxes that your content sits inside. Now it's time to look at how to place your boxes in the right place in relation to the viewport, and to each other. We have covered the necessary prerequisites so we can now dive deep into CSS layout, looking at different display settings, modern layout tools like flexbox, CSS grid, and positioning, and some of the legacy techniques you might still want to know about.
    
    Use CSS to solve common problems
    This module provides links to sections of content explaining how to use CSS to solve common problems when creating a web page "
    
  },
  {
    "category_id": "03",
    "category_name": "javascript",
    "image_url": "file:///C:/Users/Acer/Downloads/js.png"

  },
  {
    "category_id": "React js",
    "category_name": "CSS",
    "image_url": "file:///C:/Users/Acer/Downloads/react.png",
    "details" :""

  },
  {
    "category_id": "C/C++",
    "category_name": "CSS",
    "image_url": "file:///C:/Users/Acer/Downloads/c%20.png",
    "details" : ""

  },
  
    {
      "category_id": "Python",
      "category_name": "CSS",
      "image_url": "file:///C:/Users/Acer/Downloads/python.png",
      "details" : ""
  
    }
  
  



]